<?xml version="1.0"?>
<!-- Top-level launch file for 2D stage_ros simulation of the kart.-->

<launch>
  <!-- SIMULATION CONFIGURATION -->
  <!-- Force nodes to use /clock as time source as opposed to "wall-clock". -->
  <param name="/use_sim_time" value="true"/>

	<!-- Topics definitions -->
	<arg name="sim_stage"         default="/sim_stage" />
	<arg name="odom_topic"        default="$(arg sim_stage)/odom" />
	<arg name="map_topic"         default="/map" />
	<arg name="velocity_topic"    default="/cmd_vel" />
	<arg name="lidar_scan_topic"  default="$(arg sim_stage)/scan" />
	<arg name="rgb_topic"         default="$(arg sim_stage)/rgb" />
	<arg name="depth_topic"       default="$(arg sim_stage)/depth" />
	<arg name="camera_info_topic" default="$(arg sim_stage)/camera_info" />

  <!-- Launch the simulation node.
		This node published a few key topics and transforms, namely:
		Topics:
		* odom
		* base_scan

		Transforms:
		* odom -> base_link
		* base_link -> base_laser
	-->
  <group ns="sim_stage">
    <node pkg="stage_ros" type="stageros" name="sim_stage"
        args="$(find sim_stage)/sim_files/track.world">
      <remap from="cmd_vel"     to="$(arg velocity_topic)"/>
      <remap from="base_scan"   to="$(arg lidar_scan_topic)"/>
      <remap from="odom"        to="$(arg odom_topic)"/>
      <remap from="image"       to="$(arg rgb_topic)"/>
      <remap from="depth"       to="$(arg depth_topic)"/>
      <remap from="camera_info" to="$(arg camera_info_topic)"/>
    </node>
  </group>

  <!-- SLAM: LOCALIZATION & MAPPING -->
  <include file="$(find rtabmap_manager)/launch/rtabmap_manager.launch">
    <arg name="depth_cam_node"    value="$(arg sim_stage)" />
    <arg name="map_topic"         value="$(arg map_topic)" />
    <arg name="odom_topic"        value="$(arg odom_topic)" />
    <arg name="rgb_topic"         value="$(arg rgb_topic)" />
    <arg name="depth_topic"       value="$(arg depth_topic)" />
    <arg name="camera_info_topic" value="$(arg camera_info_topic)" />
  </include>

  <!-- GOAL SETTING -->
  <!-- Run the goal setting algorithm to navigate without a preliminary map (lap 1).
    This node takes 2D laser scans (/top/scan) then constructs a goal message and 
    creates an ActionClient to sends the goal as ROS actions to SimpleActionServer 
    on move_base.
	-->
  <node pkg="slam_mode_goal" type="slam_mode_goal.py" name="slam_mode_goal" 
        output="screen" args="$(arg lidar_scan_topic)" />

  <!-- ROS NAVIGATION STACK -->
  <!-- Configure and run move_base to set up the ROS Navigation Stack.
    More details on inputs/outputs can be found in move_base.launch -->
  <include file="$(find navigation_stack)/launch/move_base.launch">
    <arg name="velocity_topic"    value="$(arg velocity_topic)" />
    <arg name="lidar_scan_topic"  value="$(arg lidar_scan_topic)" />
    <arg name="odom_topic"        value="$(arg odom_topic)" />
    <arg name="map_topic"         value="$(arg map_topic)" />
  </include>

  <!-- MICROCONTROLLER COMM -->
  <!-- Run the communication script to enable and start communicating with the 
    microcontroller. This node subscribed to the /cmd_vel topic published by 
    /move_base and then then sends packets containing the velocity and steering 
    angle to the MCU over a serial connection. -->
	<!-- TODO(Issue 7): Migrate from AMP_v1. -->
  <!-- <node pkg="ti_comm" type="ti_comm_node" name="ti_comm_node" output="screen" /> -->

  <!-- Launch rviz with the configuration file in order to visualize incoming data -->
  <node name="rviz" pkg="rviz" type="rviz" 
        args="-d $(find sim_stage)/sim_files/track_rviz.rviz" />

</launch>
