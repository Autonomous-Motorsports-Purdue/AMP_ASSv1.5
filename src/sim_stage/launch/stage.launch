<?xml version="1.0"?>
<!-- Top-level launch file for 2D stage_ros simulation of the kart.-->

<launch>
  <!-- SIMULATION CONFIGURATION -->
  <!-- Force nodes to use /clock as time source as opposed to "wall-clock". -->
  <param name="/use_sim_time" value="true"/>

  <!-- Launch the simulation node.
		This node published a few key topics and transforms, namely:
		Topics:
		* odom
		* base_scan

		Transforms:
		* odom -> base_footprint
		* base_footprint -> base_link
		* base_link -> base_laser
	-->
	<node pkg="stage_ros" type="stageros" name="sim_stage"
		args="$(find sim_stage)/sim_files/track.world">
		<remap from="base_scan" to="top/scan"/>
	</node>

  <!-- SLAM: LOCALIZATION & MAPPING 
  This part of the software stack will not match with what we use 'on the ground'
  as there is no way to integrate rtabmap with stage to perform SLAM.
  -->
  <!-- Map Server: Publishes the /map topic with a static map. -->
	<node name="map_server" pkg="map_server" type="map_server" 
		args="$(find sim_stage)/sim_files/track.yaml" output="screen">
		<param name="frame_id" value="map"/>
	</node>

  <!-- Localization: Publishes the map->odom transform. -->
	<node pkg="amcl" type="amcl" name="amcl" output="screen">
		<rosparam file="$(find sim_stage)/params/amcl_params.yaml" command="load" />
		<remap from="scan" to="top/scan"/>

    <param name="initial_pose_x" value="4"/>
    <param name="initial_pose_y" value="1.5"/>
    <param name="initial_pose_a" value="0"/>
	</node>   

  <!-- GOAL SETTING -->
  <!-- Run the goal setting algorithm to navigate without a preliminary map (lap 1).
    This node takes 2D laser scans (/top/scan) then constructs a goal message and 
    creates an ActionClient to sends the goal as ROS actions to SimpleActionServer 
    on move_base.
	-->
  <node pkg="slam_mode_goal" type="slam_mode_goal.py" name="slam_mode_goal" 
        output="screen" />

  <!-- ROS NAVIGATION STACK -->
  <!-- Configure and run move_base to set up the ROS Navigation Stack.
    More details on inputs/outputs can be found in move_base.launch -->
  <include file="$(find navigation_stack)/launch/move_base.launch" />

  <!-- MICROCONTROLLER COMM -->
  <!-- Run the communication script to enable and start communicating with the 
    microcontroller. This node subscribed to the /cmd_vel topic published by 
    /move_base and then then sends packets containing the velocity and steering 
    angle to the MCU over a serial connection. -->
	<!-- TODO(Issue 7): Migrate from AMP_v1. -->
  <!-- <node pkg="ti_comm" type="ti_comm_node" name="ti_comm_node" output="screen" /> -->

</launch>
